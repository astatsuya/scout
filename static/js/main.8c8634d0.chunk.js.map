{"version":3,"sources":["components/Form.js","components/Result.js","components/PreviousResult.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","className","type","value","onClick","addHappening","Result","AmountHappening","happening","length","AmountExcellent","AmountGood","AmountBad","AmountPoor","i","percentExcellent","toFixed","percentGood","percentBad","percentPoor","resetCurrentHappening","PreviousResult","lastRecord","map","index","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","newHappening","happeningArray","concat","target","setState","components_Form","components_Result","components_PreviousResult","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c8634d0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = (props) => {\n  return(\n    <div className=\"Form\">\n      <button\n        type=\"submit\"\n        value=\"excellent\"\n        onClick={props.addHappening}\n      >Excellent</button>\n\n      <button\n        type=\"submit\"\n        value=\"good\"\n        onClick={props.addHappening}\n      >Good</button>\n\n      <button\n        type=\"submit\"\n        value=\"bad\"\n        onClick={props.addHappening}\n      >Bad</button>\n\n      <button\n        type=\"submit\"\n        value=\"poor\"\n        onClick={props.addHappening}\n      >Poor</button>\n    </div>\n  )\n}\n\nexport default Form;\n","import React from 'react';\n\nconst Result = (props) => {\n\n  let AmountHappening =  props.happening.length;\n  let AmountExcellent = 0;\n  let AmountGood = 0;\n  let AmountBad = 0;\n  let AmountPoor = 0;\n\n  for (let i = 0; i < AmountHappening; i ++) {\n    if (props.happening[i] === 'excellent') {\n      AmountExcellent ++;\n    } else if (props.happening[i] === 'good') {\n      AmountGood ++;\n    } else if (props.happening[i] === 'bad') {\n      AmountBad ++;\n    } else if (props.happening[i] === 'poor') {\n      AmountPoor ++;\n    }\n  }\n\n  const percentExcellent = (AmountExcellent / AmountHappening) ? (AmountExcellent / AmountHappening * 100).toFixed(2) : \"0.00\";\n  const percentGood = (AmountGood / AmountHappening) ? (AmountGood / AmountHappening * 100).toFixed(2) : \"0.00\";\n  const percentBad = (AmountBad / AmountHappening) ? (AmountBad / AmountHappening * 100).toFixed(2) : \"0.00\";\n  const percentPoor = (AmountPoor / AmountHappening) ? (AmountPoor / AmountHappening * 100).toFixed(2) : \"0.00\";\n\n  return(\n    <div className=\"Result\">\n      <div className=\"top-part\">\n        <div className=\"left-container\">\n          <ul>\n            <li>Excellent:</li>\n            <li>Good:</li>\n            <li>Bad:</li>\n            <li>Poor:</li>\n          </ul>\n        </div>\n        <div className=\"middle-container\">\n          <ul>\n            <li>{AmountExcellent}回</li>\n            <li>{AmountGood}回</li>\n            <li>{AmountBad}回</li>\n            <li>{AmountPoor}回</li>\n          </ul>\n        </div>\n        <div className=\"right-container\">\n          <ul>\n            <li>{percentExcellent}%</li>\n            <li>{percentGood}%</li>\n            <li>{percentBad}%</li>\n            <li>{percentPoor}%</li>\n          </ul>\n        </div>\n      </div>\n      <div className=\"bottom-part\">\n        <p>Total: {AmountHappening}回</p>\n        <button onClick={props.resetCurrentHappening}>Reset</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Result;\n","import React from 'react';\n\nconst PreviousResult = (props) => {\n  let lastRecord = props.happening.map((value, index) => {\n    return <li key={index}>{index + 1}回目の記録は{value}</li>;\n  })\n\n  return(\n    <div className=\"PreviousResult\">\n      <div className=\"Previous-ul\">\n        <ul>\n          {lastRecord}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default PreviousResult;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form'\nimport Result from './components/Result'\nimport PreviousResult from './components/PreviousResult'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      happening: []\n    }\n\n    this.addHappening = this.addHappening.bind(this)\n    this.resetCurrentHappening = this.resetCurrentHappening.bind(this)\n  }\n\n  addHappening(newHappening) {\n    let happeningArray = this.state.happening.concat([newHappening.target.value])\n    this.setState({\n      happening: happeningArray\n    })\n  }\n\n  resetCurrentHappening () {\n    this.setState({\n      happening: []\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Form addHappening={this.addHappening} />\n        <Result\n          happening={this.state.happening}\n          resetCurrentHappening={this.resetCurrentHappening}\n        />\n        <PreviousResult happening={this.state.happening} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}